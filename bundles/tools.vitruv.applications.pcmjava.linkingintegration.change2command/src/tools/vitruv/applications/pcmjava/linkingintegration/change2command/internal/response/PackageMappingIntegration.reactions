import org.emftext.language.java.members.Method
import org.eclipse.emf.ecore.util.EcoreUtil
import org.emftext.language.java.members.Field
import org.palladiosimulator.pcm.repository.OperationSignature
import org.palladiosimulator.pcm.repository.RepositoryFactory
import org.palladiosimulator.pcm.repository.Repository
import org.palladiosimulator.pcm.repository.DataType
import org.emftext.language.java.modifiers.Public
import org.emftext.language.java.modifiers.Private
import org.emftext.language.java.modifiers.Protected
import com.google.common.collect.Sets
import tools.vitruv.framework.correspondence.CorrespondenceModelUtil
import tools.vitruv.framework.userinteraction.UserInteractionType
import tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

// TODO We can convert several custom statements to reactions language statements, e.g. correspondence creation, element creation
reactions: PackageMappingIntegration
in reaction to changes in Java
execute actions in PCM

//empty implementation for add and remove imports
reaction AddImportReaction {
	after element created and inserted in java::JavaRoot[imports]
	call {}
}

reaction RemoveImportReaction {
	after element deleted and removed from java::JavaRoot[imports]
	call {}
}

reaction RenameMethod {
	after attribute replaced at java::Method[name]
	call renamedMethod(affectedEObject, newValue)
}

routine renamedMethod(java::Method method, String newMethodName) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to method
	}
	action {
		update operationSignature {
			operationSignature.entityName = newMethodName
			//EvaluationHelper.instance.logChange2ActionHandeldByIntegrationReaction(change, "renamed operation signature " + operationSignature + " to " + change.newValue)
		}
	} 
}

reaction RemoveMethodEvent {
	after element deleted and removed from java::ConcreteClassifier[members]
		with { 
			// TODO replace with element filter in trigger
			if (oldValue instanceof Method){
			// EvaluationHelper.
				return true
			}	
			return false
		}
	call removedMethodEvent(oldValue as Method)
} 

routine removedMethodEvent(java::Method method) {
	match {
		val opSig = retrieve pcm::OperationSignature corresponding to method
	}
	action {
		remove correspondence between opSig and method
		update opSig {
			EcoreUtil.remove(opSig)
		}
	}
}

reaction AddMethodEvent {
	after element created and inserted in java::ConcreteClassifier[members]
		with newValue instanceof Method // TODO replace with element filter in trigger
	call addedMethodEvent(affectedEObject, newValue as Method)
}

routine addedMethodEvent(java::ConcreteClassifier clazz, java::Method method) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to clazz
	}
	action {
		call {	
			createOperationSignature(opInterface, method)
		}
	}
}

routine createOperationSignature(pcm::OperationInterface opInterface, java::Method newMethod) {
	action {
		update newMethod {
			// ask user whether to add the new method to the operationInterface
			val selection = userInteracting.selectFromMessage(UserInteractionType.MODAL, "Should the new method " + 
				newMethod.name + " be part of the OperationInterface "+ opInterface.entityName+ "? " , "Yes", "No")
			if(selection == 0){
				var OperationSignature opSig = RepositoryFactory.eINSTANCE.createOperationSignature
				opSig.entityName = newMethod.name
				opSig.interface__OperationSignature = opInterface
				CorrespondenceModelUtil.createAndAddCorrespondence(correspondenceModel, opSig, newMethod)
			}
		}
	}
}

reaction CreateMetodParameterEvent {
	after element created and inserted in java::Method[parameters]
	call createdMethodParameterEvent(affectedEObject, newValue)
}

routine createdMethodParameterEvent(java::Method method, java::Parameter parameter) {
	match {
		val opSignature = retrieve pcm::OperationSignature corresponding to method
	}
	action {
		add correspondence between opSignature and parameter
		update opSignature {
			userInteracting.showMessage(UserInteractionType.MODAL, "Created new parameter for OperationSiganture" + opSignature)
			val pcmParameter = RepositoryFactory.eINSTANCE.createParameter
			pcmParameter.dataType__Parameter = TypeReferenceCorrespondenceHelper.
				getCorrespondingPCMDataTypeForTypeReference(parameter.typeReference, correspondenceModel,
					userInteracting, opSignature.interface__OperationSignature.repository__Interface, parameter.arrayDimension)
			pcmParameter.parameterName = parameter.name
		}
	}
}

reaction MethodParameterNameChangeEvent {
	after attribute replaced at java::Parameter[name]
	call methodParameterNameChangedEvent(affectedEObject, oldValue, newValue)
}

routine methodParameterNameChangedEvent(java::Parameter parameter, String oldParameterName, String newParameterName) {
	match { 
		val pcmParam = retrieve pcm::Parameter corresponding to parameter
	}
	action {
		update pcmParam {
			userInteracting.showMessage(UserInteractionType.MODAL, "Renamed method parameter " + oldParameterName +  " to " + newParameterName)
			pcmParam.parameterName = newParameterName
		}
	}
}	

reaction ChangeMethodTypeEvent {
	after element replaced at java::Method[typeReference]
	call changedMethodType(affectedEObject, newValue)
}
	
routine changedMethodType(java::Method method, java::TypeReference newType) {
	match { 	
		val opSignature = retrieve pcm::OperationSignature corresponding to method
	}
	action {
		update opSignature {
			val Repository repo = opSignature.interface__OperationSignature.repository__Interface
			val DataType newReturnValue = TypeReferenceCorrespondenceHelper.
				getCorrespondingPCMDataTypeForTypeReference(newType,
					correspondenceModel, userInteracting, repo, method.arrayDimension)
			opSignature.returnType__OperationSignature = newReturnValue
			userInteracting.showMessage(UserInteractionType.MODAL, "Changed return type of opSig to " + newReturnValue)
		}
	}
}

reaction RemoveFieldEvent {
	after element deleted and removed from java::ConcreteClassifier[members]
		with oldValue instanceof Field // TODO replace with element filter in trigger
	call removedFieldEvent(oldValue as Field)
}
	
routine removedFieldEvent(java::Field field) {
	match { 
		val namedElement = retrieve pcm::NamedElement corresponding to field
	}	
	action {
		remove correspondence between field and namedElement
		update field {
			userInteracting.showMessage(UserInteractionType.MODAL, "Removed " + namedElement + " because the corresponding field " + field + " has been removed"  )
			// TODO This is wrong, isnt't it? Should be "namedElement"!?
			EcoreUtil.remove(field)
		}
	}
}
	
reaction AddFieldEvent {
	after element created and inserted in java::ConcreteClassifier[members]
		with newValue instanceof Field // TODO replace with element filter in trigger
	call addedFieldEvent(affectedEObject, newValue as Field)
}

routine addedFieldEvent(java::ConcreteClassifier clazz, java::Field field) {
	match {
		val basicComponent = retrieve pcm::BasicComponent corresponding to clazz
		val opInterface = retrieve pcm::OperationInterface corresponding to field.typeReference
	}
	action {
		call {
			//new Field with PCM Type corresponding to an OperationInterface has been added in basic component --> created requrired role
			createRequiredRole(basicComponent, opInterface, field)
		}
	}
}

routine createRequiredRole(pcm::BasicComponent basicComponent, pcm::OperationInterface opInterface, java::Field field) {
	action {
		val opRequiredRole = create pcm::OperationRequiredRole
		add correspondence between opRequiredRole and field
		update opRequiredRole {
			opRequiredRole.requiredInterface__OperationRequiredRole = opInterface
			opRequiredRole.requiringEntity_RequiredRole = basicComponent
			userInteracting.showMessage(UserInteractionType.MODAL, "Create OperationRequiredRole between Component " + 
				basicComponent.entityName + " and Interface " + opInterface.entityName)	
		}
	}
}

reaction ChangeFieldTypeEvent {
	after element replaced at java::Field[typeReference]
	call changedFieldTypeEvent(affectedEObject, oldValue, newValue)
}

routine changedFieldTypeEvent(java::Field field, java::TypeReference oldType, java::TypeReference newType) {
	match {
		val oldCorrespondingOpInterface = retrieve optional pcm::OperationInterface corresponding to oldType
		val opInterface = retrieve optional pcm::OperationInterface corresponding to newType
		val opRequiredRole = retrieve optional pcm::OperationRequiredRole corresponding to field
		val basicComponent = retrieve pcm::BasicComponent corresponding to field.containingConcreteClassifier
	}
	action {
		call {
			if(oldCorrespondingOpInterface.present && opInterface.present && opRequiredRole.present){
				// reset required role 
				userInteracting.showMessage(UserInteractionType.MODAL, "the operation required role has been changed")
				opRequiredRole.get.requiredInterface__OperationRequiredRole = opInterface.get
				return
			}
			if(!oldCorrespondingOpInterface.present && opInterface.present){
				// new required role needs to be added 
				userInteracting.showMessage(UserInteractionType.MODAL, "Create OperationRequiredRole between Component " + 
					basicComponent.entityName + " and Interface " + opInterface.get.entityName)
				createRequiredRole(basicComponent, opInterface.get, field)
				return
			}
			if(oldCorrespondingOpInterface.present && !opInterface.present && opRequiredRole.present){
				// remove required role and correspondence
				userInteracting.showMessage(UserInteractionType.MODAL, "Remove OperationRequiredRole between Component " + 
					basicComponent.entityName + " and Interface " + oldCorrespondingOpInterface.get.entityName)
				removeRequiredRoleAndCorrespondence(opRequiredRole.get, field)
			}
		}
	}
}
	

routine removeRequiredRoleAndCorrespondence(pcm::OperationRequiredRole orr, java::Field field) {
	action {
		remove correspondence between orr and field
		update orr {
			EcoreUtil.^delete(orr)
		}
	}
}

// empty implementation for changeFieldModifier, because the change is not architectural relevant
reaction ChangeFieldModifierEvent {
	after element created and inserted in java::Field[annotationsAndModifiers]
	call { }
}

reaction RemoveFieldModifierEvent {
	after element deleted and removed from java::Field[annotationsAndModifiers]
	call { }
}

// if the method was public and had a corresponding opSig--> ask user whether to delete the correspondence
// if the method was non-public and is public now and the classifier has a corresponding interface 
//--> ask user whether to add the signature to the corresponding interface 
reaction ChangeMethodModifierEvent {
	after element created and inserted in java::Method[annotationsAndModifiers]
	call changedMethodModifierEvent(affectedEObject, newValue)
}

routine changedMethodModifierEvent(java::Method method, java::AnnotationInstanceOrModifier annotationOrModifier) {
	match {
		val operationSignature = retrieve optional pcm::OperationSignature corresponding to method
		val operationInterface = retrieve pcm::OperationInterface corresponding to method.containingConcreteClassifier
	}
	action {
		call {
			if (annotationOrModifier instanceof Public){ 
				//new public method created	
				createOperationSignature(operationInterface, method)
				return
			} else if (operationSignature.present &&(annotationOrModifier instanceof Protected || annotationOrModifier instanceof Private)){		
				// public method with corresponding signature has been deleted
				userInteracting.showMessage(UserInteractionType.MODAL, "Public method with correspondence has been made private. 
					The corresponding operaitonSignature " + operationSignature.get.entityName + " will be deleted as well.")
				correspondenceModel.removeCorrespondencesThatInvolveAtLeastAndDependend(Sets.newHashSet(operationSignature.get))
				EcoreUtil.remove(operationSignature.get)
				return
			}
		}
	}
}

	