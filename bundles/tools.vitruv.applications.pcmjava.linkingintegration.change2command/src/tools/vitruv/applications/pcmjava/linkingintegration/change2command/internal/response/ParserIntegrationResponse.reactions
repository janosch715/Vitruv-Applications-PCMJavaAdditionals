import org.emftext.language.java.members.Method
import tools.vitruv.framework.correspondence.CorrespondenceModelUtil

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: ParserIntegrationReaction
in reaction to changes in Java
execute actions in PCM

reaction ChangeFieldModifierEventParser {
	after element created and inserted in java::Field[annotationsAndModifiers]
	call { }
}

reaction RemoveFieldModifierEventParser {
	after element deleted and removed from java::Field[annotationsAndModifiers]
	call { }
}

reaction AddMethodEventParser {
	after element created and inserted in java::ConcreteClassifier[members]
		with  newValue instanceof Method // TODO replace with element filter in trigger
	call addedMethodEventParser(affectedEObject, newValue as Method)
}

routine addedMethodEventParser(java::ConcreteClassifier clazz, java::Method method) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to clazz
	}
	action {
		val opSig = create pcm::OperationSignature and initialize {
			opSig.entityName = method.name
			opSig.interface__OperationSignature = opInterface
			// TODO is this necessary or can we use the add correspondence statement creating a ReactionsCorrespondence?
			CorrespondenceModelUtil.createAndAddCorrespondence(correspondenceModel, opSig, method)		
		}
	}
}
